generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum RuleType {
  click
  impression
}

model User {
  id              String  @id @default(cuid())
  email           String  @unique
  passwordHash    String
  firstName       String?
  lastName        String?
  isEmailVerified Boolean @default(false)

  memberships        Membership[]
  ownedOrganizations Organization[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @default(now()) @updatedAt
  deletedAt          DateTime?
  RefreshToken       RefreshToken[]
  Session            Session[]
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  expiresAt DateTime
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  userAgent String?
  ipAddress String?
  createdAt DateTime @default(now())
  expiresAt DateTime
  revoked   Boolean  @default(false)
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, userAgent])
}

model Organization {
  id      String @id @default(cuid())
  name    String
  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  members   Membership[]
  domains   Domain[]
  customer  Customer?
  createdAt DateTime     @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
}

model Customer {
  id               String       @id @default(cuid())
  stripeCustomerId String?      @unique
  organization     Organization @relation(fields: [organizationId], references: [id])
  organizationId   String       @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
}

model Membership {
  role           Role         @default(MEMBER)
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  @@id([userId, organizationId])
}

model DomainRule {
  id              String   @id @default(cuid())
  name            String
  type            RuleType
  css_selector    String?
  regex_attribute String?
  regex_pattern   String?

  domain    Domain    @relation(fields: [domainId], references: [id])
  domainId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
}

model DomainTracker {
  name     String
  domain   Domain @relation(fields: [domainId], references: [id])
  domainId String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  @@id([domainId, name])
}

model Domain {
  id             String       @id @default(cuid())
  name           String
  url            String
  uniqueId       String       @unique @default(cuid())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  rules          DomainRule[]
  trackers       DomainTracker[]
  isTracking     Boolean         @default(true)
  trackerVersion String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
}

model Visitor {
  id              String   @id @default(cuid())
  fingerprintHash String   @unique
  createdAt       DateTime @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  events Event[]
}

model Event {
  id           String   @id @default(cuid())
  type         String
  timestamp    DateTime
  sequentialId Int
  tabId        String
  url          String
  value        Json

  orientation  String?  
  scrollDepth  Int?

  visitor   Visitor @relation(fields: [visitorId], references: [id])
  visitorId String
  createdAt       DateTime @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

model RecordingStart {
  id           String   @id @default(cuid())
  fingerprint  String   // from visitor
  tabId        String
  url          String
  meta         Json     // type 4
  snapshot     Json     // type 2
  firstChunk   Json     // one or more type 0s
  createdAt    DateTime @default(now())

  @@index([fingerprint, tabId, url])
  @@unique([fingerprint, tabId, url], name: "fingerprint_tabId_url")
}